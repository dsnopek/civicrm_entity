<?php

/**
 * @file
 */

use Drupal\civicrm_entity\SupportedEntities;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_theme().
 */
function civicrm_entity_theme() {
  return [
    'civicrm_entity_entity_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 *
 * Populates supported CiviCRM Entity definitions.
 */
function civicrm_entity_entity_type_build(array &$entity_types) {
  $logger = \Drupal::logger('civicrm-entity');
  $supported_entities = SupportedEntities::getInfo();
  $enabled_entity_types = \Drupal::config('civicrm_entity.settings')->get('enabled_entity_types');
  foreach ($supported_entities as $entity_type_id => $civicrm_entity_info) {
    $clean_entity_type_id = str_replace('_', '-', $entity_type_id);
    $civicrm_entity_name = $civicrm_entity_info['civicrm entity name'];

    if (empty($civicrm_entity_info['label property'])) {
      $logger->debug(sprintf('Missing label property: %s', $entity_type_id));
      continue;
    }

    $entity_types[$entity_type_id] = new ContentEntityType([
      'provider' => 'civicrm_entity',
      'class' => \Drupal\civicrm_entity\Entity\CivicrmEntity::class,
      'originalClass' => \Drupal\civicrm_entity\Entity\CivicrmEntity::class,
      'id' => $entity_type_id,
      'civicrm_entity' => $civicrm_entity_name,
      'civicrm_entity_ui_exposed' => in_array($entity_type_id, $enabled_entity_types),
      'label' => new TranslatableMarkup('CiviCRM :name', [':name' => $civicrm_entity_info['civicrm entity label']]),
      // @todo add label_singular
      // @todo add label_plural
      // @todo add label_count
      'entity_keys' => [
        'id' => 'id',
        'label' => $civicrm_entity_info['label property'],
      ],
      'base_table' => 'civicrm_entity_' . $civicrm_entity_name,
      'data_table' => 'civicrm_entity_' . $civicrm_entity_name . '_field_data',
      'admin_permission' => 'administer civicrm entity',
      'permission_granularity' => 'entity_type',
      'handlers' => [
        'storage' => \Drupal\civicrm_entity\CiviEntityStorage::class,
        'list_builder' => \Drupal\civicrm_entity\CivicrmEntityListBuilder::class,
        'route_provider' => [
          'default' => \Drupal\civicrm_entity\Routing\CiviCrmEntityRouteProvider::class,
        ],
        'access' => \Drupal\civicrm_entity\CivicrmEntityAccessHandler::class,
        'form' => [
          'default' => \Drupal\civicrm_entity\Form\CivicrmEntityForm::class,
          'add' => \Drupal\civicrm_entity\Form\CivicrmEntityForm::class,
          'edit' => \Drupal\civicrm_entity\Form\CivicrmEntityForm::class,
          'delete' => \Drupal\Core\Entity\ContentEntityDeleteForm::class,
        ],
      ],
      // Generate route paths.
      'links' => [
        'canonical' => sprintf('/%s/{%s}', $clean_entity_type_id, $entity_type_id),
        'delete-form' => sprintf('/%s/{%s}/delete', $clean_entity_type_id, $entity_type_id),
        'edit-form' => sprintf('/%s/{%s}/edit', $clean_entity_type_id, $entity_type_id),
        'add-form' => sprintf('/%s/add', $clean_entity_type_id, $entity_type_id),
        'collection' => sprintf('/admin/structure/civicrm-entity/%s', $clean_entity_type_id),
      ],
      'field_ui_base_route' => "entity.$entity_type_id.collection",
    ]);
  }
}

/**
 * Implements callback_allowed_values_function().
 *
 * Provides the pseudoconstant values for CiviCRM entity fields.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *  The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|NULL $entity
 *  The entity.
 * @param bool $cacheable
 *  If the options are cacheable.
 *
 * @return array
 *  The array of field options.
 */
function civicrm_entity_pseudoconstant_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = NULL) {
  /** @var \Drupal\civicrm_entity\CiviCrmApiInterface $civicrm_api */
  $civicrm_api = \Drupal::service('civicrm_entity.api');
  $entity_type = $entity->getEntityType();
  $options = $civicrm_api->getOptions($entity_type->get('civicrm_entity'), $definition->getName());
  return $options;
}

function civicrm_entity_test_migration() {
  $migration_ids = [
    'civicrm_entity_test_civicrm_event',
  ];
  $migrations = \Drupal::getContainer()->get('plugin.manager.migration')->createInstances($migration_ids);
  foreach ($migrations as $migration) {
    $executable = new \Drupal\migrate\MigrateExecutable($migration, new \Drupal\migrate\MigrateMessage());
    $executable->import();
  }
}
